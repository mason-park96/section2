package datastructure.graph;

/*
냉정하게 말하자면, 본질은 데이터를 어떻게 처리하고 어떤 모양으로 배치하고, 어떻게 순회할지
이미 선배님들이 정해놓은 규칙대로 구현하는 것이다.
DFS, BFS 는 그 대표적인 순회 방법이다.

이것은 절대적인 기술이나 과학적인 진리가 아니다. 그저, 그런 방법들 중 하나일 뿐이다.
우리가 할 일은 문제를 보고, 이 문제를 해결하기 위해 가장 적절한 탐색 알고리즘을 선택해서 그것을 통하여 문제가 제안하는
형태의 데이터를 처리하면 될 뿐이다.
어렵지 않다.

DFS 의 경우, 다음의 케이스에서 적절하다.
1. 그래프의 모든 정점을 방문하는 것이 중요한 문제일 경우 (BFS 써도 OK)
2. 경로의 특성을 저장해 둬야 하는 문제 (BFS 는 경로의 특징을 가지지 못한다.)
    예를 들면, 각 정점이 숫자 데이터를 가지고 있으며 A 부터 B 까지 가는 경로를 구하는데
    같은 숫자를 가지는 정점이 있으면 안된다는 문제 등
3. 자동 미로 생성과 같은 문제
    DFS 알고리즘을 활용하여 방향을 무작위로 해서 계속 길을 뚫다가 막혀서 뚫을 수 없다면

*/

public class DFSSolution {

}
